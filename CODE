import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

# Load the data (assuming you have a CSV with burnout-related reviews)
df = pd.read_csv('/content/Burnout_Reviews.csv')

# Prepare features and target
X = df['Review']
y = df['Burnout_Label']  # Assuming 'Burnout_Label' indicates the sentiment towards burnout

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize the features
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Train the Naive Bayes model
clf = MultinomialNB()
clf.fit(X_train_vec, y_train)

# Make predictions on the test set
y_pred = clf.predict(X_test_vec)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Get user input
review_text = input("Enter a review related to burnout: ")

# Vectorize the user input
review_vec = vectorizer.transform([review_text])

# Predict the sentiment
prediction = clf.predict(review_vec)[0]

# Print the prediction
if prediction == 1:
  print("Positive sentiment towards burnout")
else:
  print("Negative sentiment towards burnout")
